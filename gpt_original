import json
import os
import numpy as np
import tensorflow as tf
import src.model as model
import src.sample as sample
import src.encoder as encoder


total_predicted_word = []

def interact_model(
    model_name,
    seed,
    nsamples,
    batch_size,
    length,
    temperature,
    top_k,
    models_dir
):
    print(nsamples)
    models_dir = os.path.expanduser(os.path.expandvars(models_dir))
    if batch_size is None:
        batch_size = 1
    assert nsamples % batch_size == 0

    enc = encoder.get_encoder(model_name, models_dir)
    hparams = model.default_hparams()
    with open(os.path.join(models_dir, model_name, 'hparams.json')) as f:
        hparams.override_from_dict(json.load(f))

    if length is None:
        length = hparams.n_ctx // 2
    elif length > hparams.n_ctx:
        raise ValueError("Can't get samples longer than window size: %s" % hparams.n_ctx)

    with tf.Session(graph=tf.Graph()) as sess:
        context = tf.placeholder(tf.int32, [batch_size, None])
        np.random.seed(seed)
        tf.set_random_seed(seed)
        output = sample.sample_sequence(
            hparams=hparams, length=length,
            context=context,
            batch_size=batch_size,
            temperature=temperature, top_k=top_k
        )

        saver = tf.train.Saver()
        ckpt = tf.train.latest_checkpoint(os.path.join(models_dir, model_name))
        saver.restore(sess, ckpt)

        while True:
            raw_text = input("Model prompt >>> ")
            while not raw_text:
                print('Prompt should not be empty!')
                raw_text = input("Model prompt >>> ")
            context_tokens = enc.encode(raw_text)
            generated = 0
            for _ in range(nsamples // batch_size):
                out = sess.run(output, feed_dict={
                    context: [context_tokens for _ in range(batch_size)]
                })[:, len(context_tokens):]
                for i in range(batch_size):
                    generated += 1
                    text = enc.decode(out[i])
                    print("=" * 40 + " SAMPLE " + str(generated) + " " + "=" * 40)
                    total_predicted_word.append(str(text))
            print(total_predicted_word)

            print("=" * 80)


# There are a few flags available, with a default value:

# model_name = '117M' : choose between 117M and 345M models. By default is 117M.
# seed = None || a random value is generated unless specified. give a specific integer value if you want to reproduce same results in the future.
# nsamples = 1 || specify the number of samples you want to print
# length = None || number of tokens (words) to print on each sample.
# batch_size= 1 || how many inputs you want to process simultaneously. only affects speed/memory
# temperature = 1 || float between 0 and 1. scales logits before sampling prior to softmax. higher temperature results in more random completions.
# top_k = 0 || Integer value controlling diversity. Truncates the set of logits considered to those with the highest values.
# 1 means only 1 word is considered for each step (token), resulting in deterministic completions.
# 40 means 40 words are considered at each step. 0 (default) is a special setting meaning no restrictions. 40 generally is a good value.

interact_model(model_name='345M',
               seed=None,
               nsamples=20,
               batch_size=1,
               length=1,
               temperature=.95,
               top_k=40,
               models_dir='/home/manmohan/projects_on_python/gpt-2/models')

#--model_name='345M'  --nsamples=10 --top_k=40 --temperature=.80 --length=1
